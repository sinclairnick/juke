"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("util");
var Util_1 = require("../common/Util");
var Token = require("token-types");
var FrameParser_1 = require("./FrameParser");
var ID3v2_1 = require("./ID3v2");
var ID3v2Parser = /** @class */ (function () {
    function ID3v2Parser() {
        this.tags = [];
    }
    ID3v2Parser.getInstance = function () {
        return new ID3v2Parser();
    };
    ID3v2Parser.removeUnsyncBytes = function (buffer) {
        var readI = 0;
        var writeI = 0;
        while (readI < buffer.length - 1) {
            if (readI !== writeI) {
                buffer[writeI] = buffer[readI];
            }
            readI += (buffer[readI] === 0xFF && buffer[readI + 1] === 0) ? 2 : 1;
            writeI++;
        }
        if (readI < buffer.length) {
            buffer[writeI++] = buffer[readI++];
        }
        return buffer.slice(0, writeI);
    };
    ID3v2Parser.readFrameHeader = function (v, majorVer) {
        var header;
        switch (majorVer) {
            case 2:
                header = {
                    id: v.toString('ascii', 0, 3),
                    length: Token.UINT24_BE.get(v, 3)
                };
                break;
            case 3:
                header = {
                    id: v.toString('ascii', 0, 4),
                    length: Token.UINT32_BE.get(v, 4),
                    flags: ID3v2Parser.readFrameFlags(v.slice(8, 10))
                };
                break;
            case 4:
                header = {
                    id: v.toString('ascii', 0, 4),
                    length: ID3v2_1.ID3v2Token.UINT32SYNCSAFE.get(v, 4),
                    flags: ID3v2Parser.readFrameFlags(v.slice(8, 10))
                };
                break;
            default:
                throw new Error('Unexpected majorVer: ' + majorVer);
        }
        return header;
    };
    ID3v2Parser.getFrameHeaderLength = function (majorVer) {
        switch (majorVer) {
            case 2:
                return 6;
            case 3:
            case 4:
                return 10;
            default:
                throw new Error('header versionIndex is incorrect');
        }
    };
    ID3v2Parser.readFrameFlags = function (b) {
        return {
            status: {
                tag_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 6),
                file_alter_preservation: Util_1.default.strtokBITSET.get(b, 0, 5),
                read_only: Util_1.default.strtokBITSET.get(b, 0, 4)
            },
            format: {
                grouping_identity: Util_1.default.strtokBITSET.get(b, 1, 7),
                compression: Util_1.default.strtokBITSET.get(b, 1, 3),
                encryption: Util_1.default.strtokBITSET.get(b, 1, 2),
                unsynchronisation: Util_1.default.strtokBITSET.get(b, 1, 1),
                data_length_indicator: Util_1.default.strtokBITSET.get(b, 1, 0)
            }
        };
    };
    ID3v2Parser.readFrameData = function (buf, frameHeader, majorVer, includeCovers) {
        switch (majorVer) {
            case 2:
                return FrameParser_1.default.readData(buf, frameHeader.id, majorVer, includeCovers);
            case 3:
            case 4:
                if (frameHeader.flags.format.unsynchronisation) {
                    buf = ID3v2Parser.removeUnsyncBytes(buf);
                }
                if (frameHeader.flags.format.data_length_indicator) {
                    buf = buf.slice(4, buf.length);
                }
                return FrameParser_1.default.readData(buf, frameHeader.id, majorVer, includeCovers);
            default:
                throw new Error('Unexpected majorVer: ' + majorVer);
        }
    };
    /**
     * Create a combined tag key, of tag & description
     * @param {string} tag e.g.: COM
     * @param {string} description e.g. iTunPGAP
     * @returns {string} e.g. COM:iTunPGAP
     */
    ID3v2Parser.makeDescriptionTagName = function (tag, description) {
        return tag + (description ? ':' + description : '');
    };
    ID3v2Parser.prototype.parse = function (result, tokenizer, options) {
        var _this = this;
        this.tokenizer = tokenizer;
        this.options = options;
        return this.tokenizer.readToken(ID3v2_1.ID3v2Token.Header).then(function (id3Header) {
            if (id3Header.fileIdentifier !== 'ID3') {
                throw new Error("expected ID3-header file-identifier 'ID3' was not found");
            }
            _this.id3Header = id3Header;
            _this.headerType = ('ID3v2.' + id3Header.version.major);
            if (id3Header.flags.isExtendedHeader) {
                return _this.parseExtendedHeader();
            }
            else {
                return _this.parseId3Data(id3Header.size);
            }
        }).then(function () {
            result.native[_this.headerType] = _this.tags;
        });
    };
    ID3v2Parser.prototype.parseExtendedHeader = function () {
        var _this = this;
        return this.tokenizer.readToken(ID3v2_1.ID3v2Token.ExtendedHeader).then(function (extendedHeader) {
            var dataRemaining = extendedHeader.size - ID3v2_1.ID3v2Token.ExtendedHeader.len;
            if (dataRemaining > 0) {
                return _this.parseExtendedHeaderData(dataRemaining, extendedHeader.size);
            }
            else {
                return _this.parseId3Data(_this.id3Header.size - extendedHeader.size);
            }
        });
    };
    ID3v2Parser.prototype.parseExtendedHeaderData = function (dataRemaining, extendedHeaderSize) {
        var _this = this;
        var buffer = Buffer.alloc(dataRemaining);
        return this.tokenizer.readBuffer(buffer, 0, dataRemaining).then(function () {
            return _this.parseId3Data(_this.id3Header.size - extendedHeaderSize);
        });
    };
    ID3v2Parser.prototype.parseId3Data = function (dataLen) {
        var _this = this;
        var buffer = Buffer.alloc(dataLen);
        return this.tokenizer.readBuffer(buffer, 0, dataLen).then(function () {
            for (var _i = 0, _a = _this.parseMetadata(buffer); _i < _a.length; _i++) {
                var tag = _a[_i];
                if (tag.id === 'TXXX') {
                    for (var _b = 0, _c = tag.value.text; _b < _c.length; _b++) {
                        var text = _c[_b];
                        _this.tags.push({ id: ID3v2Parser.makeDescriptionTagName(tag.id, tag.value.description), value: text });
                    }
                }
                else if (tag.id === 'COM') {
                    for (var _d = 0, _e = tag.value; _d < _e.length; _d++) {
                        var value = _e[_d];
                        _this.tags.push({ id: ID3v2Parser.makeDescriptionTagName(tag.id, value.description), value: value.text });
                    }
                }
                else if (util_1.isArray(tag.value)) {
                    for (var _f = 0, _g = tag.value; _f < _g.length; _f++) {
                        var value = _g[_f];
                        _this.tags.push({ id: tag.id, value: value });
                    }
                }
                else {
                    _this.tags.push({ id: tag.id, value: tag.value });
                }
            }
        });
    };
    ID3v2Parser.prototype.parseMetadata = function (data) {
        var offset = 0;
        var tags = [];
        while (true) {
            if (offset === data.length)
                break;
            var frameHeaderLength = ID3v2Parser.getFrameHeaderLength(this.id3Header.version.major);
            if (offset + frameHeaderLength > data.length) {
                // ToDo: generate WARNING: Illegal ID3v2-tag-length
                break;
            }
            var frameHeaderBytes = data.slice(offset, offset += frameHeaderLength);
            var frameHeader = ID3v2Parser.readFrameHeader(frameHeaderBytes, this.id3Header.version.major);
            // Last frame. Check first char is a letter, bit of defensive programming
            if (frameHeader.id === '' || frameHeader.id === '\u0000\u0000\u0000\u0000' ||
                'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(frameHeader.id[0]) === -1) {
                // ToDo: generate WARNING
                break;
            }
            var frameDataBytes = data.slice(offset, offset += frameHeader.length);
            var values = ID3v2Parser.readFrameData(frameDataBytes, frameHeader, this.id3Header.version.major, !this.options.skipCovers);
            tags.push({ id: frameHeader.id, value: values });
        }
        return tags;
    };
    return ID3v2Parser;
}());
exports.ID3v2Parser = ID3v2Parser;
