"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var strtok3 = require("strtok3");
var ID3v2_1 = require("./ID3v2");
var ID3v2Parser_1 = require("./ID3v2Parser");
var ID3v1Parser_1 = require("../id3v1/ID3v1Parser");
var _debug = require("debug");
var debug = _debug("music-metadata:parser:ID3");
var AbstractID3v2Parser = /** @class */ (function () {
    function AbstractID3v2Parser() {
        this.id3parser = new ID3v2Parser_1.ID3v2Parser();
    }
    AbstractID3v2Parser.startsWithID3v2Header = function (tokenizer) {
        return tokenizer.peekToken(ID3v2_1.ID3v2Token.Header).then(function (id3Header) { return (id3Header.fileIdentifier === "ID3"); });
    };
    AbstractID3v2Parser.prototype.parse = function (tokenizer, options) {
        var metadata = {
            format: {},
            native: {}
        };
        return this.parseID3v2(metadata, tokenizer, options).then(function () {
            return metadata;
        }).catch(function (err) {
            if (err.message === strtok3.endOfFile)
                // ToDo: maybe a warning?
                return metadata;
            else
                throw err;
        });
    };
    AbstractID3v2Parser.prototype.finalize = function (metadata) {
        return metadata;
    };
    AbstractID3v2Parser.prototype.parseID3v2 = function (metadata, tokenizer, options) {
        var _this = this;
        return this.tryReadId3v2Headers(metadata, tokenizer, options)
            .then(function () {
            debug("End of ID3v2 header, go to MPEG-parser: pos=%s", tokenizer.position);
            return _this._parse(metadata, tokenizer, options);
        })
            .then(function () {
            var id3v1parser = new ID3v1Parser_1.ID3v1Parser();
            return id3v1parser.parse(tokenizer).then(function (id3v1Metadata) {
                for (var tagType in id3v1Metadata) {
                    metadata.native[tagType] = id3v1Metadata[tagType];
                }
                _this.finalize(metadata);
            });
        });
    };
    AbstractID3v2Parser.prototype.tryReadId3v2Headers = function (metadata, tokenizer, options) {
        var _this = this;
        return tokenizer.peekToken(ID3v2_1.ID3v2Token.Header)
            .then(function (id3Header) {
            if (id3Header.fileIdentifier === "ID3") {
                debug("Found ID3v2 header, pos=%s", tokenizer.position);
                return _this.id3parser.parse(metadata, tokenizer, options)
                    .then(function () { return _this.tryReadId3v2Headers(metadata, tokenizer, options); });
            }
        });
    };
    return AbstractID3v2Parser;
}());
exports.AbstractID3v2Parser = AbstractID3v2Parser;
