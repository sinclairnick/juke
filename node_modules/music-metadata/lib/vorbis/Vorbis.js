"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Token = require("token-types");
var ID3v2_1 = require("../id3v2/ID3v2");
/**
 * Parse the METADATA_BLOCK_PICTURE
 * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE
 * Ref: https://xiph.org/flac/format.html#metadata_block_picture
 * // ToDo: move to ID3 / APIC?
 */
var VorbisPictureToken = /** @class */ (function () {
    function VorbisPictureToken(len) {
        this.len = len;
    }
    VorbisPictureToken.fromBase64 = function (base64str) {
        return this.fromBuffer(Buffer.from(base64str, 'base64'));
    };
    VorbisPictureToken.fromBuffer = function (buffer) {
        var pic = new VorbisPictureToken(buffer.length);
        return pic.get(buffer, 0);
    };
    VorbisPictureToken.prototype.get = function (buffer, offset) {
        var type = ID3v2_1.AttachedPictureType[Token.UINT32_BE.get(buffer, offset)];
        var mimeLen = Token.UINT32_BE.get(buffer, offset += 4);
        var format = buffer.toString('utf-8', offset += 4, offset + mimeLen);
        var descLen = Token.UINT32_BE.get(buffer, offset += mimeLen);
        var description = buffer.toString('utf-8', offset += 4, offset + descLen);
        var width = Token.UINT32_BE.get(buffer, offset += descLen);
        var height = Token.UINT32_BE.get(buffer, offset += 4);
        var colour_depth = Token.UINT32_BE.get(buffer, offset += 4);
        var indexed_color = Token.UINT32_BE.get(buffer, offset += 4);
        var picDataLen = Token.UINT32_BE.get(buffer, offset += 4);
        var data = Buffer.from(buffer.slice(offset += 4, offset + picDataLen));
        return {
            type: type,
            format: format,
            description: description,
            width: width,
            height: height,
            colour_depth: colour_depth,
            indexed_color: indexed_color,
            data: data
        };
    };
    return VorbisPictureToken;
}());
exports.VorbisPictureToken = VorbisPictureToken;
/**
 * Comment header decoder
 * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1
 */
exports.CommonHeader = {
    len: 7,
    get: function (buf, off) {
        return {
            packetType: buf.readUInt8(off),
            vorbis: new Token.StringType(6, 'ascii').get(buf, off + 1)
        };
    }
};
/**
 * Identification header decoder
 * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2
 */
exports.IdentificationHeader = {
    len: 23,
    get: function (buf, off) {
        return {
            version: buf.readUInt32LE(off + 0),
            channelMode: buf.readUInt8(off + 4),
            sampleRate: buf.readUInt32LE(off + 5),
            bitrateMax: buf.readUInt32LE(off + 9),
            bitrateNominal: buf.readUInt32LE(off + 13),
            bitrateMin: buf.readUInt32LE(off + 17)
        };
    }
};
