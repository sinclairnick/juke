// ASF Objects
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Util_1 = require("../common/Util");
var Token = require("token-types");
var GUID_1 = require("./GUID");
var AsfUtil_1 = require("./AsfUtil");
var ID3v2_1 = require("../id3v2/ID3v2");
/**
 * Data Type: Specifies the type of information being stored. The following values are recognized.
 */
var DataType;
(function (DataType) {
    /**
     * Unicode string. The data consists of a sequence of Unicode characters.
     */
    DataType[DataType["UnicodeString"] = 0] = "UnicodeString";
    /**
     * BYTE array. The type of data is implementation-specific.
     */
    DataType[DataType["ByteArray"] = 1] = "ByteArray";
    /**
     * BOOL. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer. Only 0x0000 or 0x0001 are permitted values.
     */
    DataType[DataType["Bool"] = 2] = "Bool";
    /**
     * DWORD. The data is 4 bytes long and should be interpreted as a 32-bit unsigned integer.
     */
    DataType[DataType["DWord"] = 3] = "DWord";
    /**
     * QWORD. The data is 8 bytes long and should be interpreted as a 64-bit unsigned integer.
     */
    DataType[DataType["QWord"] = 4] = "QWord";
    /**
     * WORD. The data is 2 bytes long and should be interpreted as a 16-bit unsigned integer.
     */
    DataType[DataType["Word"] = 5] = "Word";
})(DataType = exports.DataType || (exports.DataType = {}));
/**
 * Token for: 3. ASF top-level Header Object
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3
 */
exports.TopLevelHeaderObjectToken = {
    len: 30,
    get: function (buf, off) {
        return {
            objectId: GUID_1.default.fromBin(new Token.BufferType(16).get(buf, off)),
            objectSize: Util_1.default.readUInt64LE(buf, off + 16),
            numberOfHeaderObjects: Token.UINT32_LE.get(buf, off + 24)
            // Reserved: 2 bytes
        };
    }
};
/**
 * Token for: 3.1 Header Object (mandatory, one only)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_1
 */
exports.HeaderObjectToken = {
    len: 24,
    get: function (buf, off) {
        return {
            objectId: GUID_1.default.fromBin(new Token.BufferType(16).get(buf, off)),
            objectSize: Util_1.default.readUInt64LE(buf, off + 16)
        };
    }
};
var State = /** @class */ (function () {
    function State(header) {
        this.len = header.objectSize - exports.HeaderObjectToken.len;
    }
    State.prototype.postProcessTag = function (tags, name, valueType, data) {
        if (name === "WM/Picture") {
            tags.push({ id: name, value: WmPictureToken.fromBuffer(data) });
        }
        else {
            var parseAttr = AsfUtil_1.AsfUtil.getParserForAttr(valueType);
            if (!parseAttr) {
                throw new Error("unexpected value headerType: " + valueType);
            }
            tags.push({ id: name, value: parseAttr(data) });
        }
    };
    return State;
}());
exports.State = State;
// ToDo: use ignore type
var IgnoreObjectState = /** @class */ (function (_super) {
    __extends(IgnoreObjectState, _super);
    function IgnoreObjectState(header) {
        return _super.call(this, header) || this;
    }
    IgnoreObjectState.prototype.get = function (buf, off) {
        return null;
    };
    return IgnoreObjectState;
}(State));
exports.IgnoreObjectState = IgnoreObjectState;
/**
 * Token for: 3.2: File Properties Object (mandatory, one only)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_2
 */
var FilePropertiesObject = /** @class */ (function (_super) {
    __extends(FilePropertiesObject, _super);
    function FilePropertiesObject(header) {
        return _super.call(this, header) || this;
    }
    FilePropertiesObject.prototype.get = function (buf, off) {
        return {
            fileId: GUID_1.default.fromBin(buf, off),
            fileSize: Util_1.default.readUInt64LE(buf, off + 16),
            creationDate: Util_1.default.readUInt64LE(buf, off + 24),
            dataPacketsCount: Util_1.default.readUInt64LE(buf, off + 32),
            playDuration: Util_1.default.readUInt64LE(buf, off + 40),
            sendDuration: Util_1.default.readUInt64LE(buf, off + 48),
            preroll: Util_1.default.readUInt64LE(buf, off + 56),
            flags: {
                broadcast: Util_1.default.strtokBITSET.get(buf, off + 64, 24),
                seekable: Util_1.default.strtokBITSET.get(buf, off + 64, 25)
            },
            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),
            minimumDataPacketSize: Token.UINT32_LE.get(buf, off + 68),
            maximumDataPacketSize: Token.UINT32_LE.get(buf, off + 72),
            maximumBitrate: Token.UINT32_LE.get(buf, off + 76)
        };
    };
    FilePropertiesObject.guid = GUID_1.default.FilePropertiesObject;
    return FilePropertiesObject;
}(State));
exports.FilePropertiesObject = FilePropertiesObject;
/**
 * Token for: 3.3 Stream Properties Object (mandatory, one per stream)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_3
 */
var StreamPropertiesObject = /** @class */ (function (_super) {
    __extends(StreamPropertiesObject, _super);
    function StreamPropertiesObject(header) {
        return _super.call(this, header) || this;
    }
    StreamPropertiesObject.prototype.get = function (buf, off) {
        return {
            streamType: GUID_1.default.fromBin(buf, off),
            errorCorrectionType: GUID_1.default.fromBin(buf, off + 16)
            // ToDo
        };
    };
    StreamPropertiesObject.guid = GUID_1.default.StreamPropertiesObject;
    return StreamPropertiesObject;
}(State));
exports.StreamPropertiesObject = StreamPropertiesObject;
/**
 * 3.4: Header Extension Object (mandatory, one only)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_4
 */
var HeaderExtensionObject = /** @class */ (function () {
    function HeaderExtensionObject() {
        this.len = 22;
    }
    HeaderExtensionObject.prototype.get = function (buf, off) {
        var dataSize = buf.readUInt32LE(off + 18);
        return {
            reserved1: GUID_1.default.fromBin(buf, off),
            reserved2: buf.readUInt16LE(off + 16),
            extensionDataSize: buf.readUInt32LE(off + 18)
        };
    };
    HeaderExtensionObject.guid = GUID_1.default.HeaderExtensionObject;
    return HeaderExtensionObject;
}());
exports.HeaderExtensionObject = HeaderExtensionObject;
/**
 * 3.10 Content Description Object (optional, one only)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_10
 */
var ContentDescriptionObjectState = /** @class */ (function (_super) {
    __extends(ContentDescriptionObjectState, _super);
    function ContentDescriptionObjectState(header) {
        return _super.call(this, header) || this;
    }
    ContentDescriptionObjectState.prototype.get = function (buf, off) {
        var tags = [];
        var pos = off + 10;
        for (var i = 0; i < ContentDescriptionObjectState.contentDescTags.length; ++i) {
            var length_1 = buf.readUInt16LE(off + i * 2);
            if (length_1 > 0) {
                var tagName = ContentDescriptionObjectState.contentDescTags[i];
                var end = pos + length_1;
                tags.push({ id: tagName, value: AsfUtil_1.AsfUtil.parseUnicodeAttr(buf.slice(pos, end)) });
                pos = end;
            }
        }
        return tags;
    };
    ContentDescriptionObjectState.guid = GUID_1.default.ContentDescriptionObject;
    ContentDescriptionObjectState.contentDescTags = ["Title", "Author", "Copyright", "Description", "Rating"];
    return ContentDescriptionObjectState;
}(State));
exports.ContentDescriptionObjectState = ContentDescriptionObjectState;
/**
 * 3.11 Extended Content Description Object (optional, one only)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/03_asf_top_level_header_object.html#3_11
 */
var ExtendedContentDescriptionObjectState = /** @class */ (function (_super) {
    __extends(ExtendedContentDescriptionObjectState, _super);
    function ExtendedContentDescriptionObjectState(header) {
        return _super.call(this, header) || this;
    }
    ExtendedContentDescriptionObjectState.prototype.get = function (buf, off) {
        var tags = [];
        var attrCount = buf.readUInt16LE(off);
        var pos = off + 2;
        for (var i = 0; i < attrCount; i += 1) {
            var nameLen = buf.readUInt16LE(pos);
            pos += 2;
            var name_1 = AsfUtil_1.AsfUtil.parseUnicodeAttr(buf.slice(pos, pos + nameLen));
            pos += nameLen;
            var valueType = buf.readUInt16LE(pos);
            pos += 2;
            var valueLen = buf.readUInt16LE(pos);
            pos += 2;
            var value = buf.slice(pos, pos + valueLen);
            pos += valueLen;
            this.postProcessTag(tags, name_1, valueType, value);
        }
        return tags;
    };
    ExtendedContentDescriptionObjectState.guid = GUID_1.default.ExtendedContentDescriptionObject;
    return ExtendedContentDescriptionObjectState;
}(State));
exports.ExtendedContentDescriptionObjectState = ExtendedContentDescriptionObjectState;
/**
 * 4.1 Extended Stream Properties Object (optional, 1 per media stream)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_1
 */
var ExtendedStreamPropertiesObjectState = /** @class */ (function (_super) {
    __extends(ExtendedStreamPropertiesObjectState, _super);
    function ExtendedStreamPropertiesObjectState(header) {
        return _super.call(this, header) || this;
    }
    ExtendedStreamPropertiesObjectState.prototype.get = function (buf, off) {
        return {
            startTime: Util_1.default.readUInt64LE(buf, off),
            endTime: Util_1.default.readUInt64LE(buf, off + 8),
            dataBitrate: buf.readInt32LE(off + 12),
            bufferSize: buf.readInt32LE(off + 16),
            initialBufferFullness: buf.readInt32LE(off + 20),
            alternateDataBitrate: buf.readInt32LE(off + 24),
            alternateBufferSize: buf.readInt32LE(off + 28),
            alternateInitialBufferFullness: buf.readInt32LE(off + 32),
            maximumObjectSize: buf.readInt32LE(off + 36),
            flags: {
                reliableFlag: Util_1.default.strtokBITSET.get(buf, off + 40, 0),
                seekableFlag: Util_1.default.strtokBITSET.get(buf, off + 40, 1),
                resendLiveCleanpointsFlag: Util_1.default.strtokBITSET.get(buf, off + 40, 2)
            },
            // flagsNumeric: Token.UINT32_LE.get(buf, off + 64),
            streamNumber: buf.readInt16LE(off + 42),
            streamLanguageId: buf.readInt16LE(off + 44),
            averageTimePerFrame: buf.readInt32LE(off + 52),
            streamNameCount: buf.readInt32LE(off + 54),
            payloadExtensionSystems: buf.readInt32LE(off + 56),
            streamNames: [],
            streamPropertiesObject: null
        };
    };
    ExtendedStreamPropertiesObjectState.guid = GUID_1.default.ExtendedStreamPropertiesObject;
    return ExtendedStreamPropertiesObjectState;
}(State));
exports.ExtendedStreamPropertiesObjectState = ExtendedStreamPropertiesObjectState;
/**
 * 4.7  Metadata Object (optional, 0 or 1)
 * Ref: http://drang.s4.xrea.com/program/tips/id3tag/wmp/04_objects_in_the_asf_header_extension_object.html#4_7
 */
var MetadataObjectState = /** @class */ (function (_super) {
    __extends(MetadataObjectState, _super);
    function MetadataObjectState(header) {
        return _super.call(this, header) || this;
    }
    MetadataObjectState.prototype.get = function (buf, off) {
        var tags = [];
        var descriptionRecordsCount = buf.readUInt16LE(off);
        var pos = off + 2;
        for (var i = 0; i < descriptionRecordsCount; i += 1) {
            pos += 4;
            var nameLen = buf.readUInt16LE(pos);
            pos += 2;
            var dataType = buf.readUInt16LE(pos);
            pos += 2;
            var dataLen = buf.readUInt32LE(pos);
            pos += 4;
            var name_2 = AsfUtil_1.AsfUtil.parseUnicodeAttr(buf.slice(pos, pos + nameLen));
            pos += nameLen;
            var data = buf.slice(pos, pos + dataLen);
            pos += dataLen;
            var parseAttr = AsfUtil_1.AsfUtil.getParserForAttr(dataType);
            if (!parseAttr) {
                throw new Error("unexpected value headerType: " + dataType);
            }
            this.postProcessTag(tags, name_2, dataType, data);
        }
        return tags;
    };
    MetadataObjectState.guid = GUID_1.default.MetadataObject;
    return MetadataObjectState;
}(State));
exports.MetadataObjectState = MetadataObjectState;
// 4.8	Metadata Library Object (optional, 0 or 1)
var MetadataLibraryObjectState = /** @class */ (function (_super) {
    __extends(MetadataLibraryObjectState, _super);
    function MetadataLibraryObjectState(header) {
        return _super.call(this, header) || this;
    }
    MetadataLibraryObjectState.guid = GUID_1.default.MetadataLibraryObject;
    return MetadataLibraryObjectState;
}(MetadataObjectState));
exports.MetadataLibraryObjectState = MetadataLibraryObjectState;
/**
 * Ref: https://msdn.microsoft.com/en-us/library/windows/desktop/dd757977(v=vs.85).aspx
 */
var WmPictureToken = /** @class */ (function () {
    function WmPictureToken(len) {
        this.len = len;
    }
    WmPictureToken.fromBase64 = function (base64str) {
        return this.fromBuffer(Buffer.from(base64str, "base64"));
    };
    WmPictureToken.fromBuffer = function (buffer) {
        var pic = new WmPictureToken(buffer.length);
        return pic.get(buffer, 0);
    };
    WmPictureToken.prototype.get = function (buffer, offset) {
        var typeId = buffer.readUInt8(offset++);
        var size = buffer.readInt32LE(offset);
        var index = 5;
        while (buffer.readUInt16BE(index) !== 0) {
            index += 2;
        }
        var format = buffer.slice(5, index).toString("utf16le");
        while (buffer.readUInt16BE(index) !== 0) {
            index += 2;
        }
        var description = buffer.slice(5, index).toString("utf16le");
        return {
            type: ID3v2_1.AttachedPictureType[typeId],
            format: format,
            description: description,
            size: size,
            data: buffer.slice(index + 4)
        };
    };
    return WmPictureToken;
}());
exports.WmPictureToken = WmPictureToken;
