'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Opus = require("./Opus");
var Token = require("token-types");
var VorbisParser_1 = require("../vorbis/VorbisParser");
/**
 * Opus parser
 * Internet Engineering Task Force (IETF) - RFC 6716
 * Used by OggParser
 */
var OpusParser = /** @class */ (function (_super) {
    __extends(OpusParser, _super);
    function OpusParser(options) {
        var _this = _super.call(this, options) || this;
        _this.options = options;
        return _this;
    }
    /**
     * Parse first Opus Ogg page
     * @param {IPageHeader} header
     * @param {Buffer} pageData
     */
    OpusParser.prototype.parseFirstPage = function (header, pageData) {
        // Parse Opus ID Header
        this.idHeader = new Opus.IdHeader(pageData.length).get(pageData, 0);
        if (this.idHeader.magicSignature !== "OpusHead")
            throw new Error("Illegal ogg/Opus magic-signature");
        this.format.dataformat = "Ogg/Opus";
        this.format.sampleRate = this.idHeader.inputSampleRate;
        this.format.numberOfChannels = this.idHeader.channelCount;
    };
    OpusParser.prototype.parseFullPage = function (pageData) {
        var magicSignature = new Token.StringType(8, 'ascii').get(pageData, 0);
        switch (magicSignature) {
            case 'OpusTags':
                this.parseUserCommentList(pageData, 8);
                break;
            default:
                break;
        }
    };
    OpusParser.prototype.calculateDuration = function (header) {
        if (this.format.sampleRate && header.absoluteGranulePosition >= 0) {
            // Calculate duration
            this.format.numberOfSamples = header.absoluteGranulePosition - this.idHeader.preSkip;
            this.format.duration = this.format.numberOfSamples / this.idHeader.inputSampleRate;
        }
    };
    return OpusParser;
}(VorbisParser_1.VorbisParser));
exports.OpusParser = OpusParser;
