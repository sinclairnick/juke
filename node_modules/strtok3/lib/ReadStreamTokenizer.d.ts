/// <reference types="node" />
import { AbstractTokenizer } from "./AbstractTokenizer";
import * as Stream from "stream";
import { Promise } from "es6-promise";
export declare class ReadStreamTokenizer extends AbstractTokenizer {
    private streamReader;
    constructor(stream: Stream.Readable, fileSize?: number);
    /**
     * Read buffer from stream
     * @param buffer
     * @param offset is the offset in the buffer to start writing at; if not provided, start at 0
     * @param length is an integer specifying the number of bytes to read
     * @returns Promise number of bytes read
     */
    readBuffer(buffer: Buffer | Uint8Array, offset?: number, length?: number): Promise<number>;
    /**
     * Peek (read ahead) buffer from tokenizer
     * @param buffer
     * @param offset is the offset in the buffer to start writing at; if not provided, start at 0
     * @param length is an integer specifying the number of bytes to read
     * @param position is an integer specifying where to begin reading from in the file. If position is null, data will be read from the current file position.
     * @returns {Promise<TResult|number>}
     */
    peekBuffer(buffer: Buffer | Uint8Array, offset?: number, length?: number): Promise<number>;
    ignore(length: number): Promise<number>;
}
