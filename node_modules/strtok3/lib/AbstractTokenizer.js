"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _1 = require("./");
var AbstractTokenizer = /** @class */ (function () {
    function AbstractTokenizer() {
        this.position = 0;
        this.numBuffer = Buffer.alloc(4);
    }
    AbstractTokenizer.prototype.readToken = function (token, position) {
        if (position === void 0) { position = null; }
        var buffer = Buffer.alloc(token.len);
        return this.readBuffer(buffer, 0, token.len, position).then(function (len) {
            if (len < token.len)
                throw new Error(_1.endOfFile);
            return token.get(buffer, 0);
        });
    };
    AbstractTokenizer.prototype.peekToken = function (token, position) {
        if (position === void 0) { position = this.position; }
        var buffer = Buffer.alloc(token.len);
        return this.peekBuffer(buffer, 0, token.len, position).then(function (len) {
            if (len < token.len)
                throw new Error(_1.endOfFile);
            return token.get(buffer, 0);
        });
    };
    AbstractTokenizer.prototype.readNumber = function (token) {
        var _this = this;
        return this.readBuffer(this.numBuffer, 0, token.len, null).then(function (len) {
            if (len < token.len)
                throw new Error(_1.endOfFile);
            return token.get(_this.numBuffer, 0);
        });
    };
    AbstractTokenizer.prototype.peekNumber = function (token) {
        var _this = this;
        return this.peekBuffer(this.numBuffer, 0, token.len).then(function (len) {
            if (len < token.len)
                throw new Error(_1.endOfFile);
            return token.get(_this.numBuffer, 0);
        });
    };
    return AbstractTokenizer;
}());
exports.AbstractTokenizer = AbstractTokenizer;
